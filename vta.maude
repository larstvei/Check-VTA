set print with parentheses on .

fmod NAME is
    pr QID .

    sort Name .
    subsort Qid < Name .
endfm

view Name from TRIV to NAME is
    sort Elt to Name .
endv

fmod CAPABILITY is
    pr NAME .

    sort Capability .

    ops c : -> Capability .
    ops in out open : Name -> Capability .
endfm

fmod VTA-SORTS is
    pr NAME .

    sorts Scheduler Tick VTA Servable NeServables Servables .
    subsort Tick < VTA .
    subsort VTA Name < Servable < NeServables < Servables .

    vars N A : NeServables .
    vars E E' : Servable .
    vars S S' : Servables .
    var C : Nat .

    op none : -> Servables [ctor] .
    op _:_ : Servables Servables -> Servables [ctor assoc comm id: none prec 121 format (d r os d)] .
    op _:_ : NeServables Servables -> NeServables [ctor ditto] .

    op _element_ : Servable Servables -> Bool .
    eq E element (E : S) = true .
    eq E element S = false [owise] .

    op size : Servables -> Nat .
    op size : NeServables -> NzNat .
    eq size(S) = size1(S, 0) .

    op size1 : Servables Nat -> Nat .
    eq size1(none, C) = C .
    eq size1((N : N : S), C) = size1((N : S), C) .
    eq size1((E : S), C) = size1(S, C + 1) [owise] .

    op merge : Servables Servables -> Servables .
    op merge : NeServables Servables -> NeServables .
    op merge : Servables NeServables -> NeServables .
    eq merge(S, S') = S : S' .

    op remove : Servables Servable -> Servables  .
    eq remove(none, E) = none .
    eq remove((E : S), E) = S .
    eq remove((E : S), E') = E : remove(S, E') [owise] .

    op removeAll : Servables Servables -> Servables  .
    eq removeAll(none, A) = none .
    eq removeAll((A : S), A) = removeAll(S, A) .
    eq removeAll((N : S), A) = N : removeAll(S, A) [owise] .
endfm

view Servable from TRIV to VTA-SORTS is
    sort Elt to Servable .
endv

fmod VTA-OPS is
    pr RAT .
    pr VTA-SORTS .
    pr CAPABILITY .

    op tick : -> Tick .

    op sdl : -> Scheduler .
    eq sdl = sched 0 {0, 0, 0, none, none} .
    op sdl : Servables -> Scheduler .
    eq sdl(Unserved) = sched 0 {0, 0, 0, none, Unserved} .

    op sched_{_,_,_,_,_} : Rat Nat Nat Nat Servables Servables -> Scheduler .

    op zero : -> VTA [ctor] .
    op _|_ : VTA VTA -> VTA [id: zero assoc comm prec 90 format (d ni d d)] .
    op _._ : Capability VTA -> VTA [prec 80 frozen (2)] .
    op _[_|_] : Name Scheduler VTA -> VTA [prec 70 format (g++ o d ni d d --)] .

    var Unserved, Served : Servables .
    vars P Q : VTA .
    var Ca : Capability .
    var Sc : Scheduler .
    var N : Name .
    var Speed : Rat .
    vars In Out Rest : Nat .

    op names : VTA -> Servables .
    eq names(zero) = none .
    eq names(tick) = none .
    eq names(Ca . P) = none .
    eq names(N[Sc | P]) = N : names(P) .
    ceq names(P | Q) = names(P) : names(Q) if P =/= zero and Q =/= zero .

    op barb : VTA -> Servables .
    eq barb(Ca . P | Q) = barb(Q) .
    eq barb(N[sched Speed {In, Out, Rest, Unserved, Served} | P] | Q) =
        barb(Q) : if Speed > 0 then N else none fi .
    ceq barb(P | Q) = barb(P) : barb(Q) if P =/= zero and Q =/= zero .
    eq barb(P) = none [owise] .

    op getConsume : Servables -> Servable .
    eq getConsume(((c . P) : Unserved)) = c . P .
    eq getConsume(Unserved) = none [owise] .
endfm

fmod EGYPTIAN is
    pr NAT .
    pr RAT .
    pr LIST{Rat} .

    vars X Y Z : Int .
    var L : List{Rat} .
    var R : Rat .

    op _negmod_ : Int Int -> Int .
    eq X negmod Y = Y + X rem Y .

    op egyptian : Rat -> List{Rat} .
    eq egyptian(R) = gather(egyptian'(R), 0) .

    op egyptian' : Rat -> List{Rat} .
    eq egyptian'(X) = X .
    eq egyptian'(1 / X) = 1 / X .
    ceq egyptian'(X / Y) = (1 / Z) egyptian'((- Y negmod X) / (Y * Z))
      if Z := ceiling(Y / X) [owise] .

    op gather : List{Rat} Nat -> List{Rat} .
    eq gather(1 L, X) = gather(L, X + 1) .
    eq gather(L, X) = X L [owise] .

    op speed : Rat -> List{Rat} .
    ceq speed(R) = X size(L)
      if X L := egyptian(R) .

    op get : Nat List{Rat} -> Rat .
    eq get(1, R L) = R .
    eq get(s(s(X)), R L) = get(s(X), L) .

    op getFraction : Nat Rat -> Nat .
    eq getFraction(X, R) = 1 / get(s(X), egyptian(R)) .
endfm

mod VTA-CALCULUS is
    pr INT .
    pr RAT .
    pr BOOL .
    pr EGYPTIAN .
    pr VTA-OPS .

    vars N M K : Name .
    vars InN OutN RestN InM OutM RestM InK OutK RestK : Nat .
    vars Speed SpdN SpdM SpdK : Rat .
    vars Sc Sc1 Sc2 Sc3 : Scheduler .
    var Ca : Capability .
    vars P Q R U : VTA .
    vars Served Unserved : Servables .
    vars SrvN SrvM UnSrvK UnSrvN UnSrvM SrvK : Servables .

    --- In the example we allow non-unique naming, leading to multisets in the
    --- schedulers.

    op makeUnserved : Name Servables Servables -> Servables .
    op makeServed : Name Servables Servables -> Servables .

    ceq makeUnserved(N, Unserved, Served) = Unserved
      if N element Served or not(N element merge(Unserved, Served)) .
    eq makeUnserved(N, Unserved, Served) = remove(Unserved, N) [owise] .

    ceq makeServed(N, Unserved, Served) = remove(Served, N) if N element Served .
    eq makeServed(N, Unserved, Served) = Served [owise] .

    crl [open] :
        M[sched Speed {InM, OutM, RestM, Unserved, Served}
          | open(N) . P | N[Sc | R] | Q]
      =>
        M[sched Speed {InM, OutM, RestM, UnSrvM, SrvM} | P | Q | R]
      if  UnSrvM := makeUnserved(N, Unserved, Served) /\
          SrvM := makeServed(N, Unserved, Served) : barb(P) : barb(R) .

    crl [in] :
        K[sched SpdK {InK, OutK, RestK, UnSrvK, SrvK}
          | N[sched SpdN {InN, OutN, RestN, SrvN, UnSrvN} | in(M) . P | Q]
          | M[sched SpdM {InM, OutM, RestM, SrvM, UnSrvM} | R] | U]
      =>
        K[sched SpdK {InK, OutK, RestK, Unserved, Served}
          | M[sched SpdM {InM, OutM, RestM, SrvM, merge(UnSrvM, N)} | R
            | N[sched SpdN {InN, OutN, RestN, SrvN, merge(UnSrvN, barb(P))}
              | P | Q]] | U]
      if  Unserved := makeUnserved(N, UnSrvK, SrvK) /\
          Served   := makeServed(N, UnSrvK, SrvK) .

    crl [out] :
        K[sched SpdK {InK, OutK, RestK, UnSrvK, SrvK}
          | M[sched SpdM {InM, OutM, RestM, UnSrvM, SrvM} | R
            | N[sched SpdN {InN, OutN, RestN, UnSrvN, SrvN}
              | out(M) . P | Q]] | U]
      =>
        K[sched SpdK {InK, OutK, RestK, UnSrvK, merge(SrvK, N)}
          | N[sched SpdN {InN, OutN, RestN, UnSrvN, merge(SrvN, barb(P))} | P | Q]
          | M[sched SpdM {InM, OutM, RestM, Unserved, Served} | R] | U]
      if  Unserved := makeUnserved(N, UnSrvM, SrvM) /\
          Served   := makeServed(N, UnSrvM, SrvM) .

    crl [consumption] :
        K[sched SpdK {InK, OutK, RestK, UnSrvK, SrvK} | c . P | R]
      =>
        K[sched SpdK {InK, OutK, RestK, UnSrvK, (SrvK : (c . P))} | R]
      if SpdK > 0 .

    crl [tick]:
        K[sched SpdK {InK, 0, 0, UnSrvK, SrvK} | tick | R]
      =>
        K[sched SpdK {s(InK), OutN, RestN, UnSrvK, SrvK} | R]
      if  OutN RestN := speed(SpdK) .

    crl [new-round] :
        K[sched SpdK {InK, OutK, RestK, none, SrvK} | R]
      =>
        K[sched SpdK {InK, OutK, RestK, SrvK, none} | R]
      if size(SrvK) > 0 .

    crl [primary-tock-consume] :
        K[sched SpdK {InK, s(OutK), RestK, UnSrvK, SrvK} | R]
      =>
        K[sched SpdK {InK, OutK, RestK, UnSrvN, SrvK} | R | P]
      if  (c . P) := getConsume(UnSrvK) /\
          UnSrvN := merge(barb(P), remove(UnSrvK, (c . P))) .

    rl [primary-tock-ambient] :
        K[sched SpdK {InK, s(OutK), RestK, (UnSrvK : N), SrvK}
          | N[sched SpdN {InN, OutN, RestN, SrvN, UnSrvN} | Q] | R]
      =>
        K[sched SpdK {InK, OutK, RestK, UnSrvK, (SrvK : N)}
          | N[sched SpdN {InN, OutN, RestN, SrvN, UnSrvN} | tick | Q] | R] .

    crl [secondary-tock-consume1] :
        K[sched SpdK {InK, OutK, s(RestK), UnSrvK, SrvK} | R]
      =>
        K[sched SpdK {InK, OutK, RestK, UnSrvN, SrvK} | R | P]
      if  InK rem getFraction(s(RestK), SpdK) == 0 /\
          (c . P) := getConsume(UnSrvK) /\
          UnSrvN := merge(barb(P), remove(UnSrvK, (c . P))) .

    crl [secondary-tock-ambient1] :
        K[sched SpdK {InK, OutK, s(RestK), (UnSrvK : N), SrvK}
          | N[sched SpdN {InN, OutN, RestN, SrvN, UnSrvN} | Q] | R]
      =>
        K[sched SpdK {InK, OutK, RestK, UnSrvK, (SrvK : N)}
          | N[sched SpdN {InN, OutN, RestN, SrvN, UnSrvN} | tick | Q] | R]
      if InK rem getFraction(s(RestK), SpdK) == 0 .

    crl [secondary-tock-no-action] :
        K[sched SpdK {InK, OutK, s(RestK), UnSrvK, SrvK} | P]
      =>
        K[sched SpdK {InK, OutK, RestK, UnSrvK, SrvK} | P]
      if  InK rem getFraction(s(RestK), SpdK) =/= 0 .
endm

mod VTA-FORMULA is
    pr VTA-CALCULUS .
    pr BOOL .

    sort Formula .
    sort Var .

    ops True False : -> Formula [ctor format (r o)] .
    op Consume : -> Formula [ctor format (r o)] .
    op NotConsume : -> Formula [ctor format (r o)] .
    op ~_ : Formula -> Formula [ctor prec 53 format (r d o)] .
    op _/\_ : Formula Formula -> Formula [comm ctor gather (E e) prec 55 format (r d d o)] .
    op _\/_ : Formula Formula -> Formula [comm ctor gather (E e) prec 59 format (r d d o)] .
    op void : -> Formula [ctor format (r o)] .
    op _[_] : Name Formula -> Formula [prec 10 format (r d d d o)] .
    op _|_ : Formula Formula -> Formula [comm assoc format (r d d o)] .
    op all_._ : Name Formula -> Formula [format (r d d d o)] .
    op exists_._ : Name Formula -> Formula [format (r d d d o)] .
    op (+)_ : Formula -> Formula [format (r d d d o)] .
    op anyone : Formula -> Formula .
    op none : Formula -> Formula .
    op <>_@__ : Nat Name Formula -> Formula [prec 53 format (r d d d d o)] .
    op <>___ : Rat Nat Formula -> Formula [prec 53 format (r d d d o)] .
    op #<_ : Nat -> Formula [prec 53 format (r d o)] .
    op #>_ : Nat -> Formula [prec 53 format (r d o)] .
    op _@_ : Formula Name -> Formula [format (r d d o)] .

    vars N M X Y : Name .
    vars F G : Formula .
    vars R : Rat .
    vars A : Nat .

    sort Substitution .
    op [_<-_] : Name Name -> Substitution .

    op __ : Formula Substitution -> Formula [prec 20] .
    eq (~ F)[X <- N] = ~ (F[X <- N]) .
    eq M[F][X <- N] = (if (M == X) then N else M fi)[F[X <- N]] .
    eq (<> A @ M F)[X <- N] = <> A @ (if (M == X) then N else M fi) F[X <- N] .
    eq (F @ M)[X <- N] = F[X <- N] @ (if (M == X) then N else M fi) .
    eq (F \/ G)[X <- N] = F[X <- N] \/ G[X <- N] .
    eq (F | G)[X <- N] = F[X <- N] | G[X <- N] .
    eq (all Y . F)[X <- N] = all Y . F[X <- N] .
    eq (exists Y . F)[X <- N] = exists Y . F[X <- N] .
    eq (<> R A F)[X <- N] = <> R A F[X <- N] .
    eq (anyone(F))[X <- N] = anyone(F[X <- N]) .
    eq (none(F))[X <- N] = none(F[X <- N]) .
    eq ((+) F)[X <- N] = (+) (F[X <- N]) .
    eq F[N <- X] = F [owise] .

    var Sc : Scheduler .
    var Ca : Capability .
    vars P Q : VTA .
    vars NS MS : Servables .
    var Ser : Servable .

    op allsubs : Name VTA Formula -> Formula .
    eq allsubs(X, P, F) = allsubs'(X, names(P), F) .

    op allsubs' : Name Servables Formula -> Formula .
    eq allsubs'(X, none, F) = True .
    eq allsubs'(X, (N : NS), F) =  F[X <- N] /\ allsubs'(X, NS, F) .

    op allsubsExist : Name VTA Formula -> Formula .
    eq allsubsExist(X, P, F) = allsubsExist'(X, names(P), F) .

    op allsubsExist' : Name Servables Formula -> Formula .
    eq allsubsExist'(X, none, F) = False .
    eq allsubsExist'(X, (N : NS), F) =  F[X <- N] \/ allsubsExist'(X, NS, F) .

    vars InN OutN RestN InM OutM RestM InK OutK RestK : Nat .
    vars Speed SpdN SpdM SpdK : Rat .
    vars SrvN SrvM UnSrvK UnSrvN UnSrvM SrvK : Servables .

    op consumptions : VTA -> Bool .
    eq consumptions(c . P) = true .
    eq consumptions(in(N) . P) = consumptions(P) .
    eq consumptions(out(N) . P) = consumptions(P) .
    eq consumptions(open(N) . P) = consumptions(P) .
    ceq consumptions(P | Q) = consumptions(P) or consumptions(Q)
      if P =/= zero and Q =/= zero .
    eq consumptions(N[Sc | P]) = consumptions(P) or consumptions(Sc) .
    eq consumptions(P) = false [owise] .

    op consumptions : Name -> Bool .
    eq consumptions(N) = false .

    op consumptions : Scheduler -> Bool .
    eq consumptions(sched Speed {InN, OutN, RestN, UnSrvN, SrvN}) =
        consumptions1(merge(UnSrvN, SrvN)) .

    op consumptions1 : Servables -> Bool .
    eq consumptions1(none) = false .
    eq consumptions1((Ser : NS)) = consumptions(Ser) or consumptions1(NS) .

    op accumulatespeed : Scheduler VTA -> VTA .
    eq accumulatespeed(sched SpdK{InK, OutK, RestK, UnSrvK, SrvK},
          (N[sched SpdN {InN, OutN, RestN, SrvN, UnSrvN} | P] | Q))
      =
        N[sched ((SpdK * SpdN) / size(merge(UnSrvK, SrvK)))
          {InN, OutN, RestN, SrvN, UnSrvN} | P] |
        accumulatespeed(sched SpdK{InK, OutK, RestK, UnSrvK, SrvK}, Q) .
    ceq accumulatespeed(Sc, P | Q) = accumulatespeed(Sc, P) | accumulatespeed(Sc, Q)
      if P =/= zero and Q =/= zero .
    eq accumulatespeed(Sc, P) = zero [owise] .

    op sublocations : VTA -> Servables .
    ceq sublocations(P | Q) = sublocations(P) : sublocations(Q)
      if P =/= zero and Q =/= zero .
    ceq sublocations(N[Sc | P]) = N[Sc | P] : Q : sublocations(Q)
      if Q := accumulatespeed(Sc, P) .
    eq sublocations(P) = P [owise] .

    op siblings : VTA -> Servables .
    ceq siblings(P | Q) = siblings(P) : siblings(Q)
      if P =/= zero and Q =/= zero .
    eq siblings(N[Sc | P]) = N[Sc | P] .
    eq siblings(P) = none [owise] .

    op contains : VTA Name -> Bool .
    ceq contains(P | Q, X) = contains(P, X) or contains(Q, X)
      if P =/= zero and Q =/= zero .
    eq contains(N[Sc | P], X) = if N == X then true else contains(P, X) fi .
    eq contains(P, X) = false [owise] .

    op time : VTA Name -> Nat .
    ceq time(P | Q, X) = max(time(P, X), time(Q, X))
      if P =/= zero and Q =/= zero .
    eq time(N[sched Speed {InN, OutN, RestN, SrvN, UnSrvN} | P], X) =
        if N == X then InN else time(P, X) fi .
    eq time(P, X) = 0 [owise] .

    op distance : VTA VTA Name -> Nat .
    eq distance(P, Q, X) = sd(time(Q, X), time(P, X)) .
endm

mod VTA-SATISFACTION is
    pr VTA-CALCULUS .
    pr VTA-FORMULA .

    vars F G : Formula .
    vars P Q : VTA .
    vars N X Y : Name .
    var Sc : Scheduler .
    var S : Nat .

    op _|=_ : VTA Formula -> Bool [frozen prec 100] .

    eq [True] : P |= True = true .
    eq [False] : P |= False = false .
    eq [Negation] : P |= ~ F = not (P |= F) .
    eq [Conjunction] : P |= F /\ G = (P |= F) and (P |= G) .
    eq [Disjunction] : P |= F \/ G = (P |= F) or (P |= G) .
    eq [Void] : zero |= void = true .
    eq [Ambient] : N[Sc | P] |= X[F] = if N == X then P |= F else false fi .
    eq [Forall] : P |= all X . F = P |= allsubs(X, P, F) .
    eq [Exists] : P |= exists X . F = P |= allsubsExist(X, P, F) .
    eq [Consumption] : P |= Consume = consumptions(P) .
    eq [NotConsumption] : P |= NotConsume = not(consumptions(P)) .
    eq [LessSubs] : N[sched Speed {InN, OutN, RestN, SrvN, UnSrvN} | P]
        |= #< S  = size(merge(SrvN, UnSrvN)) <= S .
    eq [MoreSubs] : N[sched Speed {InN, OutN, RestN, SrvN, UnSrvN} | P]
        |= #> S  = size(merge(SrvN, UnSrvN)) > S .
    ceq [SpatialNext] : P |= (+) F = spatialnext(Ps, F)
      if  Ps := siblings(P) .
    ceq [AnyOne] : P |= anyone(F) = anysat(Ps, F)
        if  Ps := siblings(P) .
    ceq [NoOne] : P |= none(F) = not(anysat(Ps, F))
            if  Ps := siblings(P) .
    ceq [Somewhere] : P |= <> Speed S F = somewhere(Ps, Speed, S, F)
      if  Ps := sublocations(P) .
    eq [LocalAdjunct] : P |= F @ N = N[sdl | P] |= F .

    crl [Parallel] : P | Q |= F | G => true
      if P |= F => true /\ Q |= G => true .

    crl [Sometime] : P |= <> A @ X F => true
      if  contains(P, X) /\
          P => Q /\
          distance(P, Q, X) <= A /\
          contains(Q, X) /\
          Q |= F => true .

    var Ps : Servables .
    vars R : Rat .
    vars A : Nat .
    vars InN OutN RestN InM OutM RestM InK OutK RestK : Nat .
    vars Speed SpdN SpdM SpdK : Rat .
    vars SrvN SrvM UnSrvK UnSrvN UnSrvM SrvK : Servables .

    op somewhere : Servables Rat Nat Formula -> Bool .
    eq somewhere((N[sched Speed {InN, OutN, RestN, SrvN, UnSrvN} | P] : Ps), R, A, F) =
        ((P |= F)
          and (Speed >= R)
          and (size(merge(SrvN, UnSrvN)) <= A))
        or somewhere(Ps, R, A, F) .
    eq somewhere(Ps, R, A, F) = false [owise] .

    op spatialnext : Servables Formula -> Bool .
    eq spatialnext((N[Sc | P] : Ps), F) = (P |= F) or spatialnext(Ps, F) .
    eq spatialnext(Ps, F) = false [owise] .

    op anysat : Servables Formula -> Bool .
    eq anysat((P : Ps), F) = (P |= F) or anysat(Ps, F) .
    eq anysat(none, F) = false [owise] .

endm

view Formula from TRIV to VTA-FORMULA is
    sort Elt to Formula .
endv

mod RESOURCE-AWARE is
    pr VTA-SATISFACTION .
    pr SET{Formula} .
    pr CONVERSION .
    pr COUNTER .

    op {_} : VTA -> VTA .
    op _?_ : Formula VTA -> VTA [frozen (2) format (d ni d d)] .

    vars P Q R : VTA .
    vars N M Y X : Name .
    vars G F : Formula .
    var Gs : Set{Formula} .
    var Ca : Capability .
    var O : Rat .
    var I : Nat .
    var S : String .
    var C : Char .
    var Sdl : Scheduler .
    vars In Out Rest : Nat .
    vars Speed : Rat .
    vars Served Unserved : Servables .

    op findGuards : VTA -> Set{Formula} .
    eq findGuards(G ? P) = G .
    ceq findGuards(P | Q) = union(findGuards(P), findGuards(Q)) if P =/= zero /\ Q =/= zero .
    eq findGuards(N[Sdl | P]) = findGuards(P) .
    eq findGuards(P) = empty [owise] .

    op removeGuard : VTA Formula -> VTA .
    eq removeGuard(N[sched Speed {In, Out, Rest, Served, Unserved} | G ? P | Q], G) =
        N[sched Speed {In, Out, Rest, Served, merge(Unserved, barb(P))} | P | Q] .
    ceq removeGuard(F ? P, G) = F ? P if F =/= G .
    ceq removeGuard(P | Q, G) = removeGuard(P, G) | removeGuard(Q, G) if P =/= zero /\ Q =/= zero .
    eq removeGuard(N[Sdl | P], G) = N[Sdl | removeGuard(P, G)] .
    eq removeGuard(P, G) =  P [owise] .

    op removeGuardedProcess : VTA Formula -> VTA .
    eq removeGuardedProcess(G ? P, G) = zero .
    ceq removeGuardedProcess(F ? P, G) = F ? P if F =/= G .
    ceq removeGuardedProcess(P | Q, G) = removeGuardedProcess(P, G) | removeGuardedProcess(Q, G) if P =/= zero /\ Q =/= zero .
    eq removeGuardedProcess(N[Sdl | P], G) = N[Sdl | removeGuardedProcess(P, G)] .
    eq removeGuardedProcess(P, G) = P [owise] .

    op removeNumber : String -> String .
    eq removeNumber(S) = removeNumber1(0, S) .

    op removeNumber1 : Nat String -> String .
    ceq removeNumber1(I, S) = S if s length(S) == I .
    ceq removeNumber1(I, S) = removeNumber1(I, substr(S, 0, I) + substr(S, s I, length(S)))
        if 48 <= ascii(substr(S, I, 1)) /\ ascii(substr(S, I, 1)) <= 57 .
    eq removeNumber1(I, S) = removeNumber1(s I, S) [owise] .

    op removeNumber : Name -> Name .
    eq removeNumber(N) = qid(removeNumber(string(N))) .

    op removeNumbers : Capability -> Capability .
    eq removeNumbers(c) = c .
    eq removeNumbers(in(N)) = in(removeNumber(N)) .
    eq removeNumbers(out(N)) = out(removeNumber(N)) .
    eq removeNumbers(open(N)) = open(removeNumber(N)) .

    op removeNumbers : VTA -> VTA .
    eq removeNumbers(zero) = zero .
    eq removeNumbers(tick) = tick .
    eq removeNumbers(Ca . P) = removeNumbers(Ca) . removeNumbers(P) .
    eq removeNumbers(N[Sdl | P]) = removeNumber(N)[Sdl | removeNumbers(P)] .
    ceq removeNumbers(P | Q) = removeNumbers(P) | removeNumbers(Q) if P =/= zero and Q =/= zero .
    eq removeNumbers(G ? P) = removeNumbers(G) ? removeNumbers(P) .
    eq removeNumbers(! P) = ! removeNumbers(P) .
    eq removeNumbers(!< Names > P) = !< Names > removeNumbers(P) .

    op removeNumbers : Formula -> Formula .
    eq removeNumbers(True) = True .
    eq removeNumbers(False) = False .
    eq removeNumbers(Consume) = Consume .
    eq removeNumbers(NotConsume) = NotConsume .
    eq removeNumbers(~ F) = ~ removeNumbers(F) .
    eq removeNumbers(M[F]) = removeNumber(M)[removeNumbers(F)] .
    eq removeNumbers(<> I @ M F) = <> I @ removeNumber(M) removeNumbers(F) .
    eq removeNumbers(F @ M) = removeNumbers(F) @ removeNumber(M) .
    eq removeNumbers(F \/ G) = removeNumbers(F) \/ removeNumbers(G) .
    eq removeNumbers(F /\ G) = removeNumbers(F) /\  removeNumbers(G) .
    eq removeNumbers(F | G) = removeNumbers(F) | removeNumbers(G) .
    eq removeNumbers(all Y . F) = all Y . removeNumbers(F) .
    eq removeNumbers(exists Y . F) = exists Y . removeNumbers(F) .
    eq removeNumbers(<> O I F) = <> O I removeNumbers(F) .
    eq removeNumbers((+) F) = (+) removeNumbers(F) .
    eq removeNumbers(anyone(F)) = anyone(removeNumbers(F)) .
    eq removeNumbers(none(F)) = none(removeNumbers(F)) .
    eq removeNumbers(#< I) = #< I .
    eq removeNumbers(#> I) = #> I .

    op _contains_ : VTA VTA -> Bool .
    eq P contains Q = removeNumbers(P) contains1 removeNumbers(Q) .

    op _contains1_ : VTA VTA -> Bool .
    ceq (Q | R) contains1 P = Q contains1 P or R contains1 P if Q =/= zero and R =/= zero .
    eq P contains1 P = true .
    eq Q contains1 P = false [owise] .

    op substitute : Servables VTA -> VTA .
    eq substitute(none, P) = P .
    eq substitute((N : Names), P) = substitute(Names, substitute1(N, P)) .

    op substitute1 : Name Capability -> Capability .
    ceq substitute1(N, in(M)) = in(N) if removeNumber(N) == M .
    ceq substitute1(N, out(M)) = out(N) if removeNumber(N) == M .
    ceq substitute1(N, open(M)) = open(N) if removeNumber(N) == M .
    eq substitute1(N, Ca) = Ca [owise] .

    op substitute1 : Name Formula -> Formula .
    eq substitute1(N, True) = True .
    eq substitute1(N, False) = False .
    eq substitute1(N, Consume) = Consume .
    eq substitute1(N, NotConsume) = NotConsume .
    eq substitute1(N, (~ F)) = ~ (substitute1(N, F)) .
    eq substitute1(N, M[F]) = (if (removeNumber(N) == M) then N else M fi)[substitute1(N, F)] .
    eq substitute1(N, <> I @ M F) = <> I @ (if (removeNumber(N) == M) then N else M fi) substitute1(N, F) .
    eq substitute1(N, F @ M) = substitute1(N, F) @ (if (removeNumber(N) == M) then N else M fi) .
    eq substitute1(N, F /\ G) = substitute1(N, F) /\ substitute1(N, G) .
    eq substitute1(N, F \/ G) = substitute1(N, F) \/ substitute1(N, G) .
    eq substitute1(N, F | G) = substitute1(N, F) | substitute1(N, G) .
    eq substitute1(N, all Y . F) = all Y . substitute1(N, F) .
    eq substitute1(N, exists Y . F) = exists Y . substitute1(N, F) .
    eq substitute1(N, <> O I F) = <> O I substitute1(N, F) .
    eq substitute1(N, (+) F) = (+) substitute1(N, F) .
    eq substitute1(N, anyone(F)) = anyone(substitute1(N, F)) .
    eq substitute1(N, none(F)) = none(substitute1(N, F)) .
    eq substitute1(N, #< I) = #< I .
    eq substitute1(N, #> I) = #> I .

    op substitute1 : Name VTA -> VTA .
    eq substitute1(N, zero) = zero .
    eq substitute1(N, tick) = tick .
    eq substitute1(N, Ca . P) = substitute1(N, Ca) . substitute1(N, P) .
    eq substitute1(N, M[Sdl | P]) = if removeNumber(N) == M then N[Sdl | substitute1(N, P)] else M[Sdl | substitute1(N, P)] fi .
    eq substitute1(N, G ? P) = substitute1(N, G) ? substitute1(N, P) .
    eq substitute1(N, ! P) = ! substitute1(N, P) .
    eq substitute1(N, !< Names > P) = !< Names > substitute1(N, P) .
    ceq substitute1(N, P | Q) = substitute1(N, P) | substitute1(N, Q) if P =/= zero and Q =/= zero .

    --- Additional cases for consumptions
    eq consumptions(G ? P) = consumptions(P) .
    eq consumptions(! P) = consumptions(P) .
    eq consumptions(!< Names > P) = consumptions(P) .

    --- Additional cases for names
    eq names(! P) =  names(P) .
    eq names(!< Names > P) =  removeAll(names(P), Names) .
    eq names(G ? P) =  none .

    var Names : Servables .
    var PrivateNames : [Servables] .

    op makePrivateName : Name -> Name .
    eq makePrivateName(N) = qid(string(N) + string(counter, 10)) .

    op makePrivateNames : Servables -> Servables .
    eq makePrivateNames(none) = none .
    eq makePrivateNames((N : Names)) = makePrivateName(N) : makePrivateNames(Names) .

    op !_ : VTA -> VTA .
    op !<_>_ : Servables VTA -> VTA .

    crl [Replication] : { ! P | Q } => { ! P | P | Q } if not(Q contains P) .

    crl [AmbientReplication] :
        N[sched Speed {In, Out, Rest, Served, Unserved} | ! P | Q]
      =>
        N[sched Speed {In, Out, Rest, Served, merge(Unserved, barb(P))} | ! P | P | Q]
      if not(Q contains P) .

    crl [PrivateReplication] :
        { !< Names > P | Q }
      =>
        { !< Names > P | substitute(PrivateNames, P) | Q }
      if not(Q contains P) /\ PrivateNames := makePrivateNames(Names) .

    crl [PrivateAmbientReplication] :
        N[sched Speed {In, Out, Rest, Served, Unserved}| !< Names > P | Q]
      =>
        N[sched Speed {In, Out, Rest, Served, merge(Unserved, barb(P))}
          | !< Names > P | substitute(PrivateNames, P) | Q]
      if not(Q contains P) /\ PrivateNames := makePrivateNames(Names) .

    crl [RemoveGuard] : { P } => { removeGuard(P, G) }
      if  G, Gs := findGuards(P) /\
          removeGuardedProcess(P, G) |= G => true .
endm

mod AUTO-SCALING-EXAMPLE is
    pr RESOURCE-AWARE .

    vars K : Nat .
    vars X Y : Name .

    ops MIN MAX : -> Nat .
    eq MIN = 1 .
    eq MAX = 4 .

    op allVMsAreFull : -> Formula .
    eq allVMsAreFull = none(NotConsume /\ ((+) anyone('isVM[True]))) .

    op moveGuard_ : Name -> Formula .
    eq moveGuard(X) = ((+) anyone('asg[ ( anyone('request[True])) /\ ( anyone(X[True] /\ NotConsume) )])).

    op restartGuard_ : Name -> Formula .
    eq restartGuard(X) = ((+) anyone('asg[ ( anyone('request[True])) /\  (anyone(X[True] /\ Consume)) ])) .

    op deleteGuard_ : Name -> Formula .
    eq deleteGuard(X) =  ((+) anyone('asg[ (none('request[True])) /\ (anyone(X[True] /\ NotConsume)) /\ (anyone('registry[True] /\ (#> MIN)))])) .

  op scalingGuard : -> Formula .
  eq scalingGuard = ((+) anyone('asg[ (anyone('request[True])) /\
                                ((anyone('registry[True] /\ (#< sd(MIN,1)))) \/ allVMsAreFull) /\
                                (anyone('registry[True] /\ (#< sd(MAX,1))))])) .

op virtualMachine : Name -> VTA .
eq virtualMachine(X) =  X[sched 1 {0, 0, 0, none, ('start : 'isVM : 'scaling_lock)}
                                  | 'start[sdl | zero]
                                  | 'scaling_lock[sdl | out(X) . zero]
                                  | ! (open('request) . zero)
                                  | ! (open('restart_local) . zero) | 'isVM[sdl | zero] | open('cleaner) . zero
                                  | ! (open('start) . 'key[sdl | out(X) . open('global_lock) . 'private_lock[sdl | in(X) . zero]])
                                  | ! (open('private_lock)
                                    . 'options[sdl('local_lock) |
                                       (moveGuard(X)
                                        ? (open('local_lock) . (moveTo(X) | open('delete_sig) . delete(X))))
                                       | (restartGuard(X)
                                        ? (open('local_lock) . delete(X)))
                                    | (deleteGuard(X)
                                        ? (open('local_lock) . remove(X)))
                                      | 'local_lock[sdl | zero]])] .


op delete : Name -> VTA .
eq delete(X) =
    out(X) . out('asg) . in('trash)
    . ('restart_global[sdl | out('options) . out('trash) . in('asg)
        . ('global_lock[sdl | zero] | open('key) . zero)]
      | 'restart_local[sdl | out('options) . out('trash) . in('asg) . in(X)
        . ('local_lock[sdl | in('options) . zero]
          | 'start[sdl | zero])]) .

op moveTo : Name -> VTA .
eq moveTo(X) =
    'move[sdl | out('options) . out(X) . in('request)
      . in(X) . 'delete_sig[sdl | in('options) . zero]] .

op cleanUp : -> VTA .
eq cleanUp =
    ! ('cleaner[sdl | open('call_clean_up)
      . open('deregistered) . out('asg)
      . in('trash) . 'inTrash[sdl | zero]]) .

op remove : Name -> VTA .
eq remove(X) =
    'call_clean_up[sdl | out('options) . out(X) . in('cleaner) . in(X)
      . ('removal[sdl | out(X) . in('registry)
          . open('counter) . 'deregistered[sdl | out('registry) . in(X) . zero]]
        | open('inTrash) . 'restart_global[sdl | out(X) . out('trash) . in('asg)
          . ('global_lock[sdl | zero] | open('key) . zero)])] .


op scaling : -> VTA .
eq scaling =  !< 'vm : 'counter > (open('scaling_lock) .
            (scalingGuard
            ? ('counter[sdl | in('registry) . 'registered[sdl | out('counter) . out('registry) . zero]] | (open('registered) . virtualMachine('vm))))) .

op registry : -> VTA .
eq registry =
      'registry[sdl
      | ! (open('removal) . zero)] .

    op consumes : Nat -> VTA .
    eq consumes(0) = zero .
    eq consumes(s K) = c . consumes(K) .

    op request : Nat -> VTA .
    eq request(K) = 'request[sdl | in('asg) . open('move) . zero | consumes(K)] .

    op trash : -> VTA .
    eq trash = 'trash[sdl | zero ] .

    op asg : -> VTA .
    eq asg = 'asg[sched 1 {0, 0, 0, none, ('scaling_lock : 'registry : 'global_lock)}
 | tick | tick | tick | tick | tick | tick | tick | tick | tick | tick
 | scaling
    | registry
    | 'global_lock[sdl | zero]
    |  (open('key) . zero)
    |  ! (open('restart_global) . zero)
 | 'scaling_lock[ sdl | zero]
    | cleanUp
 ] .

    op example : -> VTA .
    eq example = 'cloud[sdl(('asg : 'request : 'request : 'trash)) | asg | trash | request(2) | request(2)] .

--- example with one request should create one vm1, have vm3 behind the guard and vm5 behind lock and guard.
--- then a lot of internal movement stuff should happen, the request should move into vm3 and be opened
--- vm3 should get ticks from asg and the consume capability should go away, thus resolving the request
--- for more requests the number of virtual machines sales according to MIN and MAX.

endm

--- red names({!< 'd > ('a[sdl | 'd[sdl | 'b[sdl | zero] | open('c). zero]])}) .
--- rew[1] {example} .
