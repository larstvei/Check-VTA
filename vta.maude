fmod NAME is
    pr QID .

    sort Name .
    subsort Qid < Name .
endfm

view Name from TRIV to NAME is
    sort Elt to Name .
endv

fmod CAPABILITY is
    pr NAME .

    sort Capability .

    ops c : -> Capability .
    ops in out open : Name -> Capability .
endfm

fmod VTA-SORTS is
    pr NAME .

    sorts Schedule Tick Servable TimedProcess .
    subsort Tick < TimedProcess .
    subsort TimedProcess Name < Servable .
endfm

view Servable from TRIV to VTA-SORTS is
    sort Elt to Servable .
endv

fmod VTA-OPS is
    pr RAT .
    pr VTA-SORTS .
    pr CAPABILITY .
    pr SET{Servable} .

    op tick : -> Tick .

    op dummysched : -> Schedule .
    op sched_{_,_,_,_,_} : Rat Nat Nat Nat Set{Servable} Set{Servable} -> Schedule .

    op dead : -> TimedProcess [ctor] .
    op _|_ : TimedProcess TimedProcess -> TimedProcess [id: dead assoc comm prec 90] .
    op _._ : Capability TimedProcess -> TimedProcess [prec 80] .
    op _[_|_] : Name Schedule TimedProcess -> TimedProcess [prec 70 format (ni+ d d d d d -)] .

    var Unserved : Set{Servable} .
    vars P Q : TimedProcess .
    var Ca : Capability .
    var Sc : Schedule .
    var N : Name .

    op names : Capability -> Set{Servable} .
    eq names(c) = empty .
    eq names(in(N)) = N .
    eq names(out(N)) = N .
    eq names(open(N)) = N .

    op names : TimedProcess -> Set{Servable} .
    eq names(dead) = empty .
    eq names(tick) = empty .
    eq names(Ca . P) = names(Ca), names(P) .
    eq names(N[Sc | P]) = N, names(P) .
    ceq names(P | Q) = names(P), names(Q) if P =/= dead and Q =/= dead .

    op barb : TimedProcess -> Set{Servable} .
    eq barb(Ca . P | Q) = barb(Q) .
    eq barb(N[Sc | P] | Q) = N, barb(Q) .
    eq barb(P) = empty [owise] .

    op getConsume : Set{Servable} -> Servable .
    eq getConsume(((c . P), Unserved)) = c . P .
    eq getConsume(Unserved) = empty [owise] .
endfm

fmod EGYPTIAN is
    pr NAT .
    pr RAT .
    pr LIST{Rat} .

    vars X Y Z : Int .
    var L : List{Rat} .
    var R : Rat .

    op _negmod_ : Int Int -> Int .
    eq X negmod Y = Y + X rem Y .

    op egyptian : Rat -> List{Rat} .
    eq egyptian(R) = gather(egyptian'(R), 0) .

    op egyptian' : Rat -> List{Rat} .
    eq egyptian'(X) = X .
    eq egyptian'(1 / X) = 1 / X .
    ceq egyptian'(X / Y) = (1 / Z) egyptian'((- Y negmod X) / (Y * Z))
      if Z := ceiling(Y / X) [owise] .

    op gather : List{Rat} Nat -> List{Rat} .
    eq gather(1 L, X) = gather(L, X + 1) .
    eq gather(L, X) = X L [owise] .

    op speed : Rat -> List{Rat} .
    ceq speed(R) = X size(L)
      if X L := egyptian(R) .

    op get : Nat List{Rat} -> Rat .
    eq get(1, R L) = R .
    eq get(s(s(X)), R L) = get(s(X), L) .

    op getFraction : Nat Rat -> Nat .
    eq getFraction(X, R) = 1 / get(s(X), egyptian(R)) .
endfm

mod TIMED-PROCESS is
    pr INT .
    pr RAT .
    pr BOOL .
    pr SET{Servable} .
    pr EGYPTIAN .
    pr VTA-OPS .

    vars N M K : Name .
    vars InN OutN RestN InM OutM RestM InK OutK RestK : Nat .
    vars Speed SpdN SpdM SpdK : Rat .
    vars Sc Sc1 Sc2 Sc3 : Schedule .
    var Ca : Capability .
    vars P Q R U : TimedProcess .
    vars Served Unserved : Set{Servable} .
    vars SrvN SrvM UnSrvK UnSrvN UnSrvM SrvK : Set{Servable} .

    crl [open] :
        M[sched Speed {InM, OutM, RestM, Unserved, Served}
          | open(N) . P | N[Sc | R] | Q]
      =>
        M[sched Speed {InM, OutM, RestM, UnSrvM, SrvM} | P | Q | R]
      if  UnSrvM := (Unserved \ N) /\
          SrvM := (Served \ N), barb(P), barb(R) /\
          N in (Served, Unserved) .

    crl [in] :
        K[sched SpdK {InK, OutK, RestK, UnSrvK, SrvK}
          | N[sched SpdN {InN, OutN, RestN, SrvN, UnSrvN} | in(M) . P | Q]
          | M[sched SpdM {InM, OutM, RestM, SrvM, UnSrvM} | R] | U]
      =>
        K[sched SpdK {InK, OutK, RestK, (UnSrvK \ N), (SrvK \ N)}
          | M[sched SpdM {InM, OutM, RestM, SrvM, (UnSrvM, N)} | R
            | N[sched SpdN {InN, OutN, RestN, SrvN, (UnSrvN, barb(P))}
              | P | Q]] | U]
      if  N in (UnSrvK, SrvK) .

    crl [out] :
        K[sched SpdK {InK, OutK, RestK, UnSrvK, SrvK}
          | M[sched SpdM {InM, OutM, RestM, SrvM, UnSrvM} | R
            | N[sched SpdN {InN, OutN, RestN, SrvN, UnSrvN}
              | out(M) . P | Q]] | U]
      =>
        K[sched SpdK {InK, OutK, RestK, UnSrvK, (SrvK, N)}
          | N[sched SpdN {InN, OutN, RestN, SrvN, (UnSrvN, barb(P))} | P | Q]
          | M[sched SpdM {InM, OutM, RestM, (SrvM \ N), (UnSrvM \ N)} | R] | U]
      if  N in (SrvM, UnSrvM) .

    crl [consumption] :
        K[sched SpdK {InK, OutK, RestK, UnSrvK, SrvK} | c . P | R]
      =>
        K[sched SpdK {InK, OutK, RestK, UnSrvK, (SrvK, (c . P))} | R]
      if SpdK > 0 .

    rl [empty]:
        K[sched SpdK {InK, 0, 0, empty, empty} | tick | R]
      =>
        K[sched SpdK {s(InK), 0, 0, empty, empty} | R] .

    crl [tick]:
        K[sched SpdK {InK, 0, 0, UnSrvK, SrvK} | tick | R]
      =>
        K[sched SpdK {s(InK), OutN, RestN, UnSrvK, SrvK} | R]
      if  OutN RestN := speed(SpdK) /\ | UnSrvK, SrvK | > 0 .

    crl [new-round] :
        K[sched SpdK {InK, OutK, RestK, empty, SrvK} | R]
      =>
        K[sched SpdK {InK, OutK, RestK, SrvK, empty} | R]
      if | SrvK | > 0 .

    crl [primary-tock-consume] :
        K[sched SpdK {InK, s(OutK), RestK, UnSrvK, SrvK} | R]
      =>
        K[sched SpdK {InK, OutK, RestK, UnSrvN, SrvK} | R | P]
      if  (c . P) := getConsume(UnSrvK) /\
          UnSrvN := (barb(P), UnSrvK \ (c . P)) .

    rl [primary-tock-ambient] :
        K[sched SpdK {InK, s(OutK), RestK, (UnSrvK, N), SrvK} | N[Sc | Q] | R]
      =>
        K[sched SpdK {InK, OutK, RestK, UnSrvK, (SrvK, N)} | N[Sc | tick | Q] | R] .

    crl [secondary-tock-consume1] :
        K[sched SpdK {InK, OutK, s(RestK), UnSrvK, SrvK} | R]
      =>
        K[sched SpdK {InK, OutK, RestK, UnSrvN, SrvK} | R | P]
      if  InK rem getFraction(s(RestK), SpdK) == 0 /\
          (c . P) := getConsume(UnSrvK) /\
          UnSrvN := (barb(P), UnSrvK \ (c . P)) .

    crl [secondary-tock-ambient1] :
        K[sched SpdK {InK, OutK, s(RestK), (UnSrvK, N), SrvK} | N[Sc | Q] | R]
      =>
        K[sched SpdK {InK, OutK, RestK, UnSrvK, (SrvK, N)} | N[Sc | tick | Q] | R]
      if InK rem getFraction(s(RestK), SpdK) == 0 .

    crl [secondary-tock-no-action] :
        K[sched SpdK {InK, OutK, s(RestK), UnSrvK, SrvK} | P]
      =>
        K[sched SpdK {InK, OutK, RestK, UnSrvK, SrvK} | P]
      if  InK rem getFraction(s(RestK), SpdK) =/= 0 .
endm

mod VTA-FORMULA is
    pr TIMED-PROCESS .
    pr BOOL .

    sort Formula .
    sort Var .

    ops True False : -> Formula [ctor format (g o)] .
    op Consume : -> Formula [ctor] .
    op ~_ : Formula -> Formula [ctor prec 53 format (r o d)] .
    op _/\_ : Formula Formula -> Formula [comm ctor gather (E e) prec 55 format (d r o d)] .
    op _\/_ : Formula Formula -> Formula [comm ctor gather (E e) prec 59 format (d r o d)] .
    op void : -> Formula [ctor format (r o)] .
    op _[_] : Name Formula -> Formula [prec 10] .
    op _|_ : Formula Formula -> Formula [comm assoc] .
    op all_._ : Name Formula -> Formula .
    op <>_@__ : Nat Name Formula -> Formula [prec 53] .
    op <>___ : Rat Nat Formula -> Formula [prec 53] .
    op _@_ : Formula Name -> Formula .

    vars N M X Y : Name .
    vars F G : Formula .
    vars R : Rat .
    vars A : Nat .

    sort Substitution .
    op [_<-_] : Name Name -> Substitution .

    op __ : Formula Substitution -> Formula [prec 20] .
    eq (~ F)[X <- N] = ~ (F[X <- N]) .
    eq M[F][X <- N] = (if (M == X) then N else M fi)[F[X <- N]] .
    eq (<> A @ M F)[X <- N] = <> A @ (if (M == X) then N else M fi) F[X <- N] .
    eq (F @ M)[X <- N] = F[X <- N] @ (if (M == X) then N else M fi) .
    eq (F \/ G)[X <- N] = F[X <- N] \/ G[X <- N] .
    eq (F | G)[X <- N] = F[X <- N] | G[X <- N] .
    eq (all Y . F)[X <- N] = all Y . F[X <- N] .
    eq (<> R A F)[X <- N] = <> R A F[X <- N] .
    eq F[N <- X] = F [owise] .

    var Sc : Schedule .
    var Ca : Capability .
    vars P Q : TimedProcess .
    vars NS MS : Set{Servable} .

    op allsubs : Name TimedProcess Formula -> Formula .
    eq allsubs(X, P, F) = allsubs'(X, names(P), F) .

    op allsubs' : Name Set{Servable} Formula -> Formula .
    eq allsubs'(X, empty, F) = True .
    eq allsubs'(X, (N, NS), F) =  F[X <- N] /\ allsubs'(X, NS, F) .

    vars InN OutN RestN InM OutM RestM InK OutK RestK : Nat .
    vars Speed SpdN SpdM SpdK : Rat .
    vars SrvN SrvM UnSrvK UnSrvN UnSrvM SrvK : Set{Servable} .

    op consumptions : TimedProcess -> Bool .
    eq consumptions(c . P) = true .
    eq consumptions(in(N) . P) = consumptions(P) .
    eq consumptions(out(N) . P) = consumptions(P) .
    eq consumptions(open(N) . P) = consumptions(P) .
    ceq consumptions(P | Q) = consumptions(P) or consumptions(Q)
      if P =/= dead and Q =/= dead .
    eq consumptions(N[Sc | P]) = consumptions(P) .
    eq consumptions(P) = false [owise] .

    op accumulatespeed : Schedule TimedProcess -> TimedProcess .
    eq accumulatespeed(sched SpdK{InK, OutK, RestK, UnSrvK, SrvK},
          (N[sched SpdN {InN, OutN, RestN, SrvN, UnSrvN} | P] | Q))
      =
        N[sched SpdK * SpdN{InN, OutN, RestN, SrvN, UnSrvN} | P] |
        accumulatespeed(sched SpdK{InK, OutK, RestK, UnSrvK, SrvK}, Q) .
    ceq accumulatespeed(Sc, P | Q) = accumulatespeed(Sc, P) | accumulatespeed(Sc, Q)
      if P =/= dead and Q =/= dead .
    eq accumulatespeed(Sc, P) = dead [owise] .

    op sublocations : TimedProcess -> Set{Servable} .
    ceq sublocations(P | Q) = sublocations(P), sublocations(Q)
      if P =/= dead and Q =/= dead .
    ceq sublocations(N[Sc | P]) = N[Sc | P], Q, sublocations(Q)
      if Q := accumulatespeed(Sc, P) .
    eq sublocations(P) = P [owise] .

    op contains : TimedProcess Name -> Bool .
    ceq contains(P | Q, X) = contains(P, X) or contains(Q, X)
      if P =/= dead and Q =/= dead .
    eq contains(N[Sc | P], X) = if N == X then true else contains(P, X) fi .
    eq contains(P, X) = false [owise] .

    op time : TimedProcess Name -> Nat .
    ceq time(P | Q, X) = max(time(P, X), time(Q, X))
      if P =/= dead and Q =/= dead .
    eq time(N[sched Speed {InN, OutN, RestN, SrvN, UnSrvN} | P], X) =
        if N == X then InN else time(P, X) fi .
    eq time(P, X) = 0 [owise] .

    op distance : TimedProcess TimedProcess Name -> Nat .
    eq distance(P, Q, X) = sd(time(Q, X), time(P, X)) .
endm

mod VTA-SATISFACTION is
    pr TIMED-PROCESS .
    pr VTA-FORMULA .

    vars F G : Formula .
    vars P Q : TimedProcess .
    vars N X : Name .
    var Sc : Schedule .
    var S : Nat .

    op _|=_ : TimedProcess Formula -> Bool [frozen prec 100] .

    eq [True] : P |= True = true .
    eq [False] : P |= False = false .
    eq [Negation] : P |= ~ F = not (P |= F) .
    eq [Conjunction] : P |= F /\ G = (P |= F) and (P |= G) .
    eq [Disjunction] : P |= F \/ G = (P |= F) or (P |= G) .
    eq [Void] : dead |= void = true .
    eq [Ambient] : N[Sc | P] |= X[F] = if N == X then P |= F else false fi .
    eq [Parallel] : P | Q |= F | G = (P |= F) and (Q |= G) or (P |= G) and (Q |= F) .
    eq [Forall] : P |= all X . F = P |= allsubs(X, P, F) .
    eq [Consumption] : P |= Consume = consumptions(P) .
    ceq [Somewhere] : P |= <> Speed S F = somewhere(Ps, Speed, S, F)
      if  Ps := sublocations(P) .
    eq [LocalAdjunct] : P |= F @ N = N[dummysched | P] |= F .

    crl [Sometime] : P |= <> A @ X F => true
      if  contains(P, X) /\
          P => Q /\
          contains(Q, X) /\
          Q |= F => true /\
          distance(P, Q, X) <= A .

    rl [Sometime-else] : P |= F => false .

    var Ps : Set{Servable} .
    vars R : Rat .
    vars A : Nat .
    vars InN OutN RestN InM OutM RestM InK OutK RestK : Nat .
    vars Speed SpdN SpdM SpdK : Rat .
    vars SrvN SrvM UnSrvK UnSrvN UnSrvM SrvK : Set{Servable} .

    op somewhere : Set{Servable} Rat Nat Formula -> Bool .
    eq somewhere((N[sched Speed {InN, OutN, RestN, SrvN, UnSrvN} | P], Ps), R, A, F) =
        ((N[sched Speed {InN, OutN, RestN, SrvN, UnSrvN} | P] |= F)
          and (Speed >= R)
          and (| SrvN, UnSrvN | <= A))
        or somewhere(Ps, R, A, F) .
    eq somewhere(Ps, R, A, F) = false [owise] .
endm

--- Examples
rew 'm[sched 0 {0,0,0,'n,empty} | 'n[C1:Schedule | 'p[C2:Schedule | dead]]
      | open('n) . 'q[C3:Schedule | dead]] .

rew 'k[sched 0 {0,0,0,('n,'m),empty}
      | 'n[sched 0 {0,0,0,empty,empty} | in('m) . dead]
      | 'm[sched 0 {0,0,0,empty,empty} | dead]] .


rew 'k[sched 0 {0,0,0,('m),empty}
     | 'm[sched 0 {0,0,0,('n),empty} | dead
     | 'n[sched 0 {0,0,0,empty,empty} | out('m) . dead]]] .

rew 'k[sched 1 {0,0,0, empty, empty} | c . dead] .

rew 'k[sched 1 {0,0,0, empty, empty} | tick] .

rew 'k[sched 1 {0,0,0, 'n, empty} | tick] .

rew 'k[sched 1 {0,0,0, empty, 'n} | tick] .

rew 'k[sched 1 {0,1,0, (c . P:TimedProcess), 'n} | dead] .

rew 'k[sched 1 {0,1,0, 'n, empty} | 'n[Sc:Schedule | P:TimedProcess]] .

rew 'k[sched 1/3 {3,0,1, (c . P:TimedProcess), 'n} | dead] .

rew 'k[sched 4/3 {0,0,0,'n,empty} | c . c . dead
      | 'n[sched 1/2 {0,0,0,empty,empty} | c . dead]
      | tick | tick | tick] .

--- should be false:
rew
'k[sched 1 {0,0,0,('vm,'r),empty} |
'vm[sched 1/2 {0,0,0,empty,empty} | tick | tick | open('r) . dead]
| 'r[sched 0 {0,0,0,empty,empty} | in('vm) . c . 'done[sched 0 {0,0,0,empty,empty} | out('vm) . dead]]]

|

'n[sched 1 {0,0,0,('vm,'r),empty} |
'vm[sched 1/2 {0,0,0,empty,empty} | tick | tick | open('r) . dead]
| 'r[sched 0 {0,0,0,empty,empty} | in('vm) . c . 'done[sched 0 {0,0,0,empty,empty} | out('vm) . dead]]]


|= 'n[True] | (<> 1 @ 'vm 'k[True | 'done[True]]) .

--- should be true:
rew

'k[sched 1 {0,0,0,('vm,'r),empty} |
'vm[sched 1/2 {0,0,0,empty,empty} | tick | tick | open('r) . dead]
| 'r[sched 0 {0,0,0,empty,empty} | in('vm) . c . 'done[sched 0 {0,0,0,empty,empty} | out('vm) . dead]]]

|

'n[sched 1 {0,0,0,('vm,'r),empty} |
'vm[sched 1/2 {0,0,0,empty,empty} | tick | tick | open('r) . dead]
| 'r[sched 0 {0,0,0,empty,empty} | in('vm) . c . 'done[sched 0 {0,0,0,empty,empty} | out('vm) . dead]]]


|= 'n[True] | (<> 2 @ 'vm 'k[True | 'done[True]]) .

rew

 'root[sched 1 {0, 0, 0, 'request, 'vm} | tick | tick |
  'request[sched 0 {0, 0, 0, empty, empty} | in('vm) . c . dead] |
  'vm[sched 3/4 {0, 0, 0, empty, empty} | open('request) . dead]]

   |= <> 2 @ 'vm ~ Consume .

rew

 'root[sched 1 {0, 0, 0, 'request, 'vm} | tick | tick |
  'request[sched 0 {0, 0, 0, empty, empty} | in('vm) . c . dead] |
  'vm[sched 3/4 {0, 0, 0, empty, empty} | open('request) . dead]]

   |= ~ (all X . (~ (<> 2 @ X ~ Consume))) .

rew
'root[sched 1 {0, 0, 0, 'request, 'vm} | tick | tick |
 'request[sched 0 {0, 0, 0, empty, empty} | in('vm) . c . dead] |
  'vm[sched 3/4 {0, 0, 0, empty, empty} | open('request) . dead]]

  |= ~ <> 2 @ 'request ~ Consume .

rew

 'root[sched 1 {0, 0, 0, 'request, 'vm} | tick | tick |
  'request[sched 0 {0, 0, 0, empty, empty} | in('vm) . c . dead] |
  'vm[sched 3/4 {0, 0, 0, empty, empty} | open('request) . dead]]

   |= (<> 2 @ 'vm (<> 2 @ 'vm True)) .